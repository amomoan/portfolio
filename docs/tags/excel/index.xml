<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Excel on YAMAMOTO MASAHIRO</title>
    <link>https://amomoan.github.io/portfolio/tags/excel/</link>
    <description>Recent content in Excel on YAMAMOTO MASAHIRO</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 19 Jul 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://amomoan.github.io/portfolio/tags/excel/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>学力に関する証明書作成アプリ</title>
      <link>https://amomoan.github.io/portfolio/posts/teacher_ability/</link>
      <pubDate>Wed, 19 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://amomoan.github.io/portfolio/posts/teacher_ability/</guid>
      <description>概要 大学には教職課程に関して「学力に関する証明書」という証明書がある。これは文部科学省が様式を公開しており、決まったルールどおりに入力する必要がある。 しかし、入学した年度や各種条件により現行法の科目に読み替える必要がある。
この操作は大変複雑で、かつ、法改正が高頻度であるため、本証明書もそれに対応するため様式を変更する必要がる。とても流動的な証明書である。 多くの大学では、この証明書の発行に多大な労力を払っている。
この証明書を発行するために今までは以下の手順を踏んでいた。
成績証明書を出力 当時の講義要項を印刷 読替表を印刷 読替のチェック（蛍光ペンで紙にマーク） その結果を文部科学省の様式に転記 備考欄に特記事項を記載 以上5までのステップはロジカルなものであるため、機械化できると判断した。
当初Excelで完結するつもりだったが、これまでの成績データが 110万件を超えたため断念。 職場の制約を満たすため、成績データや個人情報などはDB化しNASに配置し、ローカルホストでサーバーを立ち上げウェブアプリからDBに接続する方法を採用した。
機密情報があるためすべては公開できないが、上記の5までのステップは1分かからず実行可能。 また、確認資料とできるように生データに近い形をExcelのシートに書き出すように工夫した。 ただし、成績情報が電子データとして保存されている場合に限定される。
効果 現時点ではテンプレートや読替表を整備中のため稼働していないので予測値。
3時間 → 3分程度
ライブラリ openpyxl は、Excel 2010 xlsx/xlsm/xltx/xltmファイルを読み書きするためのPythonライブラリ。 pandas は、データ操作と分析のためのPythonライブラリで、データフレームというデータ構造を提供している。 flask は、軽量なWSGIウェブアプリケーションフレームワークで、簡単なアプリケーションから複雑なアプリケーションまでスケールアップすることができる。 flask_sqlalchemy は、FlaskアプリケーションにSQLAlchemyのサポートを追加する拡張機能。FlaskとSQLAlchemyを使用することを簡単にするために、便利なデフォルトと追加のヘルパーが提供されている。 sqlalchemy は、Python SQLツールキットおよびオブジェクト関係マッパーであり、データベースとの対話を容易にする。 dotenv は、.env ファイルから環境変数を読み込み、process.env にロードするためのゼロ依存モジュール。コードから環境設定を分離して保存することは、The Twelve-Factor App方法論に基づいている。 flask # app.py import io import os import re import sqlite3 from urllib.parse import quote import openpyxl import pandas as pd from flask import (Flask, Response, current_app, flash, g, redirect, render_template, request, session) from flask_sqlalchemy import SQLAlchemy from openpyxl.</description>
    </item>
    
    <item>
      <title>教室帳票変換ツール</title>
      <link>https://amomoan.github.io/portfolio/posts/room_schedule/</link>
      <pubDate>Wed, 05 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://amomoan.github.io/portfolio/posts/room_schedule/</guid>
      <description>概要 教務システムから出力されたExcelファイル（単票形式）からマトリクス表形式のExcelファイルに変換する。教室の利用状況を総覧する帳票がなく緊急で教室変更などを行う必要が出たときに確認に時間がかかっていた。マトリクス形式に変換することですぐ状況を確認できるようになり、業務が改善した。
githubでコードを公開しています。
効果 空いている教室の利用状況を確認するのに要していた時間の短縮
10　→　2分 /人・回
スタッフ数30人
詳細 dist/roomSchedule.exeを配布しています。
コードの説明 このPythonコードは、学務システムから出力される施設予約と講義のスケジュールが記載されたファイル&amp;quot;施設予約.xlsx&amp;quot;を、時間割表のような形でExcelに書き出すためのものです。 施設予約.xlsxは非常に見づらく日々発生する教室確認作業が滞るため作成しました。
使い方 プログラムを起動します。 「施設予約ファイルを選択」ウィンドウが表示されますので、対象のExcelファイル&amp;quot;施設予約.xlsx&amp;quot;を選択します。 処理が完了すると、指定したExcelファイルと同じディレクトリに結果が出力されます。 必要なライブラリ os sys pandas datetime time numpy tkinter tqdm styleframe 処理の流れ 施設予約ファイルを選択する 施設予約ファイルを読み込む 予約区分=&amp;ldquo;施設予約&amp;quot;の各予約に対して時限を割り当てたデータフレームを作成 予約区分=&amp;ldquo;講義&amp;quot;のデータフレームを作成 施設予約と講義のデータフレームを結合する。 時間割表のような枠だけのデータフレームを作成。 5のデータフレームのデータを6に転記する。 Excelファイルに書き込む。 </description>
    </item>
    
    <item>
      <title>卒業証明書発行ツール</title>
      <link>https://amomoan.github.io/portfolio/posts/certificate_issuance_tool/</link>
      <pubDate>Tue, 04 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://amomoan.github.io/portfolio/posts/certificate_issuance_tool/</guid>
      <description>概要 教務システムで管理していない昔の卒業生から卒業証明書の発行依頼があった場合、毎回Wordのテンプレートを打ち換えて証明書を作成していたが、操作が煩雑で記載内容にミスが多く手間がかかっていた。学籍情報で機械的に判定できるため、ExcelマクロでWordファイルを作成するようにした。
また卒業証明書の発行依頼件数は特に多いため業務改善に有効だった。
効果 担当職員が10人程度いるが、毎週数件の依頼があるため、その都度作業時間が短縮されている。 また、作成の正確性が向上した。（英単語入力のスペルミスなど）
1件あたり 20分→2分程度に短縮された。</description>
    </item>
    
    <item>
      <title>就職管理システム</title>
      <link>https://amomoan.github.io/portfolio/posts/recruit_manager/</link>
      <pubDate>Mon, 03 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://amomoan.github.io/portfolio/posts/recruit_manager/</guid>
      <description>概要 担当課から相談を受け２つのキャンパスで２回制作。初回はAccessで開発したが担当課では保守ができず、あまり使ってもらえなかった。
反省を生かし２回目はExcelで作成。マクロは使用せずテーブル設計を工夫し、関数を用い担当者でメンテナンスできるように工夫した。その結果現在でも使用されている。
相談内容 (2度目の成功事例) 企業訪問を受けた際、従来Excelフォーマット（単票形式）に担当者がその内容を記録していた。それを印刷してファイリングしていて、後からその情報を閲覧するときにはファイルの内容を探す手段がとられていた。
また、学生の就職先は別のシステムで管理されており、担当者によって企業名の入力が異なるため、データを結合しづらい状況があった。
私が業務改善を行っていることを知っていたキャリアセンター職員から相談を受け改善することになった。
検討 1度目は就職先管理をAccessで行うことが目的だったが、Accessの運用は担当職員にはハードルが高く、また、自分が所属している部署ではなかったため、サポートがしづらい状況だった。そのため、管理システムは完成したが運用してもらえなかった苦い経験があった。
反省点と改善点
Excelで完結する 担当者がメンテナンスできるようにする（持続可能性） マクロは使わない なるべく簡単なシート関数で実装する 作成 要件定義：作りこむ前に簡単に作成してみて担当者にヒアリングした。機能の過不足について調査。 作成：データベース部分のシートと個別帳票シートに分けて、Lookup関数で参照するように作成。メンテナンスしやすいように正規化は最小限に留めた。印刷する必要もあるとのことだった。 納品：担当者とその上司に実際にサンプルデータで説明を行う。 データ移行：今までの各担当者が蓄積していた微妙に違う帳票内容をクレンジングしてデータ移行した。 効果 入力する項目数は同じため入力に要する時間はあまり変わらない。ただし、誰が入力しても同じようなデータになる。
効果を発揮するのは後でそのデータを抽出するとき。データベースシートから容易に抽出できる。
検索時間：30分 → 10秒</description>
    </item>
    
    <item>
      <title>Excelマクロアドイン</title>
      <link>https://amomoan.github.io/portfolio/posts/macro_addin_list/</link>
      <pubDate>Sun, 02 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://amomoan.github.io/portfolio/posts/macro_addin_list/</guid>
      <description>概要 よく使う集計作業などをワンクリックでできるようにしたもの。例えば複数のシート内容を結合する機能など。希望者には配布している。
効果 ブックやシートの結合はよく行うが、手作業で行うと時間がかかるので、特に効果的だった。 自分の業務上100ブック、数百シート程度のExcelファイルを結合することもある。このように数が多くなればなるほど効果的。</description>
    </item>
    
    <item>
      <title>成績不振者抽出ツール</title>
      <link>https://amomoan.github.io/portfolio/posts/bad_score_checker/</link>
      <pubDate>Sat, 01 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://amomoan.github.io/portfolio/posts/bad_score_checker/</guid>
      <description>概要 成績不振者には退学を勧告する制度がある。誤った勧告は許されないため、慎重な判定が必要だった。
それまでの担当者が「秘伝のたれ」のようにExcelを継ぎ足して対応していた。そのためExcelのガラパゴス化がひどく解読するのも一苦労だった。 教務システムから成績を抽出し、そのExcelに取り込んで複雑なマニュアル操作によって何故か判定結果が出るのである。 結局それが正しいか成績表を出力して確認するので作り変えることになった。
判定条件は論理的に解釈できるものであったので、当時（2016年）勉強を始めたSQLで判定することとした。 SQLはAccessで実行した。
教務システムから出力したExcelファイルをAccessにインポートしてクエリを発行する流れである。 当然判定は正確に行われた。
その後別の部署に異動した。
システム入れ替えに伴いベンダーと仕様調整を行っていた2022年に私の作った判定システムが今も現役で稼働していることを知ってうれしくなった。
効果 1～2週間　→　3分 程度</description>
    </item>
    
  </channel>
</rss>
